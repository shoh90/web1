version: '3.8'

services:
  # 채용 대시보드 메인 애플리케이션
  recruitment-dashboard:
    build: .
    container_name: recruitment-dashboard
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./data:/app/data  # 데이터 볼륨 마운트
      - ./logs:/app/logs  # 로그 볼륨 마운트
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - recruitment-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: recruitment-postgres
    environment:
      POSTGRES_DB: recruitment_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - recruitment-network

  # Redis 캐싱 서버
  redis:
    image: redis:7-alpine
    container_name: recruitment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - recruitment-network

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: recruitment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - recruitment-dashboard
    restart: unless-stopped
    networks:
      - recruitment-network

  # 모니터링 - Prometheus (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: recruitment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - recruitment-network

  # 모니터링 - Grafana (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: recruitment-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - recruitment-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  recruitment-network:
    driver: bridge
